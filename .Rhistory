Q_wald = function(p, Sigma, cont, g(n), alpha){
stat = g(n) * t(p)%*%t(cont) %*% MASS:ginv(cont%*%Sigma%*%t(cont)) %*% cont %*% p
df   = Matrix::rankMatrix(cont%*%Sigma)
pv   = 1 - pchisq(stat, df)
dec  = pv < alpha
return(list(Statistic = stat, df = df, p.value = pv))
}
library(mvtnorm)
mvtnorm::qmvnorm(0.05)
mvtnorm::qmvnorm(0.05, sigma = diag(1, 3))
mvtnorm::qmvt(0.05, sigma = diag(1,3))
mvtnorm::qmvnorm(0.95, sigma = diag(1, 3))
mvtnorm::qmvt(0.95, sigma = diag(1,3))
?qmvt
mvtnorm::qmvt(0.95, sigma = diag(1,3), df = 10)
mvtnorm::qmvnorm(0.95, sigma = diag(1, 3))
mvtnorm::qmvt(0.95, sigma = diag(1,3), df = 10)
mvtnorm::qmvt(0.95, sigma = diag(1,3), df = 20)
n = rep(5, 5)
m = lapply(n, FUN = function(x){
return(rep(n, n))
})
m
n
rep(5, 5)
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
m
log(2)
log(2) / log(2)
rexp(1, log(2))
rexp(100, log(2))
rbinom(3, 1, 0.5)
rbinom(30, 1, 0.5)
rbinom(30, 2, 0.5)
do.call(paste0(r, dist), list(n = 1, lambda = 1))
dist = "pois"
do.call(paste0("r", dist), list(n = 1, lambda = 1))
do.call(paste0("r", dist), list(n = 1, lambda = 1))
do.call(paste0("r", dist), list(n = 1, lambda = 1))
do.call(paste0("r", dist), list(n = 1, lambda = 1))
do.call(paste0("r", dist), list(n = 1, lambda = 1))
dist = "norm"
do.call(paste0("r", dist), list(n = 1, mean = 0, sd = 1))
set.seed(1133)
do.call(paste0("r", dist), list(n = 1, mean = 0, sd = 1))
set.seed(1133)
rnorm(1)
ab = list(mean = 0, sd = 1)
ab
c(3, ab)
# Data Generation ---------------------------------------------------------
h_0_f = function(n = rep(5, 5), m = NULL, dist = "norm", params = list(mean = 0, sd = 1)){
if(is.null(m)){
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
}
l = list()
for(i in 1:length(n)){
l[[i]] = list()
for(j in length(m[[i]])){
l[[i]][[j]] = do.call(paste0("r", dist), c(m[[i]][[j]], params))
}
}
return(l)
}
h_0_f
h_0_f()
n
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
m
m
m[[1]][2]
m[[1]][[2]]
# Data Generation ---------------------------------------------------------
h_0_f = function(n = rep(5, 5), m = NULL, dist = "norm", params = list(mean = 0, sd = 1)){
if(is.null(m)){
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
}
l = list()
for(i in 1:length(n)){
l[[i]] = list()
for(j in length(m[[i]])){
l[[i]][[j]] = do.call(paste0("r", dist), c(m[[i]][j], params))
}
}
return(l)
}
h_0_f()
m
# Data Generation ---------------------------------------------------------
h_0_f = function(n = rep(5, 5), m = NULL, dist = "norm", params = list(mean = 0, sd = 1)){
if(is.null(m)){
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
}
l = list()
for(i in 1:length(n)){
l[[i]] = list()
for(j in length(m[[i]])){
l[[i]][[j]] = do.call(paste0("r", dist), c(m[[i]][j], params))
print(do.call(paste0("r", dist), c(m[[i]][j], params)))
}
}
return(l)
}
h_0_f()
# Data Generation ---------------------------------------------------------
h_0_f = function(n = rep(5, 5), m = NULL, dist = "norm", params = list(mean = 0, sd = 1)){
if(is.null(m)){
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
}
l = list()
for(i in 1:length(n)){
l[[i]] = list()
for(j in length(m[[i]])){
l[[i]][[j]] = do.call(paste0("r", dist), c(m[[i]][j], params))
print(paste(i, ":", j))
}
}
return(l)
}
h_0_f()
# Data Generation ---------------------------------------------------------
h_0_f = function(n = rep(5, 5), m = NULL, dist = "norm", params = list(mean = 0, sd = 1)){
if(is.null(m)){
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
}
l = list()
for(i in 1:length(n)){
l[[i]] = list()
for(j in 1:length(m[[i]])){
l[[i]][[j]] = do.call(paste0("r", dist), c(m[[i]][j], params))
print(paste(i, ":", j))
}
}
return(l)
}
a = h_0_f()
a
version
n
m = lapply(n, FUN = function(x){
return(rep(n, 1))
})
m
3 %in% 2
3%in%3
h_0_f
h_0_f()
a = list()
a[1] = c(1:40)
b = c(1:20)
b[[1]]
b[[15]]
a[[1]] = c(1:40)
a[[1]]
3 %in% a[[1]]
3 %in% b[[1]]
3 %in% b[[3]]
3 %in% b[[9]]
3%in%3
3%in%5
nm   = expand.grid(n_is, m_is)
n_is = c(3, 5, 10, 15, 25, 50)
m_is = c(3, 5, 10, 15, 20, 25, 40)
nm   = expand.grid(n_is, m_is)
nm
library(copula)
install.package("copula")
install.packages("copula")
library(copula)
rmvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"))
mvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"))
mvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"), paramMargins = list(list(alpha = 1, beta = 2), list(size = 1, prob = 0.5), list(rate = 3)))
copula::mvdc
npmv::mvdc
?npmv::mvdc
install.packages("npmv")
?npmv::mvdc
library(npmv)
mvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"), paramMargins = list(list(alpha = 1, beta = 2), list(size = 1, prob = 0.5), list(rate = 3)))
??mvdc
Mvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"), paramMargins = list(list(alpha = 1, beta = 2), list(size = 1, prob = 0.5), list(rate = 3)))
rMvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"), paramMargins = list(list(alpha = 1, beta = 2), list(size = 1, prob = 0.5), list(rate = 3)))
copula::rMvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"), paramMargins = list(list(alpha = 1, beta = 2), list(size = 1, prob = 0.5), list(rate = 3)))
install.packages("gsl")
library(gsl)
library(gsl)
copula::rMvdc(copula = normalCopula(c(0.02, 0.3, 0.15), dim = 3, dispstr = "un"), margins = c("beta", "binom", "pois"), paramMargins = list(list(alpha = 1, beta = 2), list(size = 1, prob = 0.5), list(rate = 3)))
install.packages("copula", dependencies = T)
library(copula)
install.packages("gsl")
library(copula)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(copula)
library(MASS)
MASS::rmvmpr,
rmvnorm
?rmvnorm
help(MASS)
MASS::mvrnorm(1, c(0, 0), diag(1, 0.03, 0.03, 1))
MASS::mvrnorm(1, c(0, 0), matrix(c(1, 0.03, 0.03, 1), ncol = 2))
a = MASS::mvrnorm(1, c(0, 0), matrix(c(1, 0.03, 0.03, 1), ncol = 2))
cor(a)
b = MASS::mvrnorm(1, c(0, 0), matrix(c(1, 0.03, 0.03, 1), ncol = 2))
cor(a, b)
b
a
a = replicate(5, MASS::mvrnorm(1, c(0, 0), matrix(c(1, 0.03, 0.03, 1), ncol = 2)))
a
a = c(a[1,], a[2,])
a
b = replicate(5, MASS::mvrnorm(1, c(0, 0), matrix(c(1, 0.03, 0.03, 1), ncol = 2)))
b = c(b[1,], b[2,])
cor(a, b)
a = replicate(5, MASS::mvrnorm(1, c(0, 0), matrix(c(1, 0.03, 0.03, 1), ncol = 2)))
a
cor(a[1,], a[2,])
library(mvnorm)
library(mvtnorm)
rmvnorm(5, c(0, 0), corr = matrix(c(1, 0.03, 0.03, 1), ncol = 2))
?rmvnorm
cor2cov
?cor2cov
cov2cor()
?cov2cor
rmvnorm(5, c(0, 0), Sigma = matrix(c(1, 0.03, 0.03, 1), ncol = 2))
?rmvnorm
rmvnorm(5, c(0, 0), sigma = matrix(c(1, 0.03, 0.03, 1), ncol = 2))
a = rmvnorm(5, c(0, 0), sigma = matrix(c(1, 0.03, 0.03, 1), ncol = 2))
cor(a[,1], a[,2])
matrix(c(1, .03, .03, 1), ncol = 2)
cov(a)
cor(a)
a = rmvnorm(500, c(0, 0), sigma = matrix(c(1, 0.03, 0.03, 1), ncol = 2))
cor(a)
cov(a)
a = rmvnorm(5000, c(0, 0), sigma = matrix(c(1, 0.03, 0.03, 1), ncol = 2))
cor(a)
cov(a)
install.packages("copula", dependencies = T)
library(copula)
install.packages("copula", dependencies = T)
install.packages("copula", repos="http://R-Forge.R-project.org")
install.packages("gsl")
install.packages("gss")
install.packages("gsl")
install.packages("gsl", dependencies = T)
SessionInfo()
sessionInfo()
install.packages("copula", dependencies = T)
library(copula)
library(ggplot2)
install.packages("ggplot2")
A = matrix(runif(20 * 10, 0, 0.1), ncol = 20)
A
ggplot()
?ggplot
ggplot(data = NULL)
library(ggplot2)
ggplot(data = NULL)
x = c(1:10)
x
-x
A[,16:20] = -A[, 16:20]
A[,6:10]
A[,6:10] = -A[, 6:10]
A[,16:20]
A$x = x
A$y = -x
A = matrix(runif(20 * 10, 0, 0.1), ncol = 20)
x = c(1:10)
A[,6:10] = -A[, 6:10]
A[,16:20] = -A[, 16:20]
A = as.data.frame(A)
A$x = x
A$y = -x
A$x
A$y
A
ggplot(A) + geom_blank()
ggplot(A, aes(x = x, y = V1))
A$V1
ggplot(A, aes(x = x, y = V1)) + geom_blank()
ggplot(A, aes(x = x, y = V1)) + geom_line()
ggplot(A, aes(x = x, y = V1)) + geom_line() + geom_blank()
ggplot(A, aes(x = x, y = V1)) + geom_line()
+ geom_line(aes(x = y, y = V11))
ggplot(A, aes(x = x, y = V1)) + geom_line() +
geom_line(aes(x = y, y = V11))
A$V11
ggplot(A, aes(x = x, y = V1)) + geom_line() +
geom_line(aes(x = y, y = V11)) +
geom_line(aes(x = x, y = V6))
ggplot(A, aes(x = x, y = V1)) + geom_line() +
geom_line(aes(x = y, y = V11)) +
geom_line(aes(x = x, y = V6)) +
geom_line(aes(x = y, y = V16))
ggplot(A, aes(x = x, y = V1)) + geom_line() +
geom_line(aes(x = y, y = V11)) +
geom_line(aes(x = x, y = V6)) +
geom_line(aes(x = y, y = V16)) +
geom_blank()
a = ggplot(A, aes(x = x, y = V1)) + geom_line()
b = ggplot(A) + geom_line(aes(x = y, y = V11))
d = ggplot(A) + geom_line(aes(x = x, y = V6))
e = ggplot(A) + geom_line(aes(x = y, y = V16))
gridExtra::grid.arrange(a, b, d, e, nrow = 2)
# number of Samples nn = 3, 5, 10, 25
# Identical Sample Size n_i = 3, 5, 10, 15, 25, 50, 100, 1000
# Identical Cluster Size m_ij = 3, 5, 10, 15, 20, 25, 40
# One Large, One Small Cluster m_ij = 10, 15, 20, 25; m_ik = 3; m_ih = 40
# One Large, One Small Sample n_i = 10, 15, 25, 50; n_j = 3; n_k = 150
# Identical Cluster Size m_ij = 3, 5, 10, 15, 20, 25, 40
# One Large, One Small Cluster m_ij = 10, 15, 20, 25; m_ik = 3; m_ih = 40
# number of samples
nn = c(3, 5, 10)
each_s = c(F, T)
both_s = c(F, T)
# Identical Sample Sizes --------------------------------------------------
n_i = c(3, 5, 10, 15, 20, 25, 50, 100)
# Identical Cluster Size
m_ij = c(3, 5, 10, 15, 20, 25, 40)
nm_1 = expand.grid(nn, n_i, m_ij)
nm_1$each_s = F
nm_1$both_s = F
nm_1$identical_s = T
nm_1$identical_c = T
nm_1$grp = 1
colnames(nm_1)[1:3] = c("nn", "n_i", "m_ij")
# Large/Small Cluster
m_ij = c(10, 15, 20, 25)
nm_2 = expand.grid(nn, n_i, m_ij, each_s, both_s)
nm_2$identical_s = T
nm_2$identical_c = F
colnames(nm_2)[1:5] = c("nn", "n_i", "m_ij", "each_s", "both_s")
# Remove invalid condition
nm_2 = nm_2[-which(which(nm_2$each_s == T) %in% which(nm_2$both_s == F)),]
nm_2$grp = 2
# Large/Small Sample Size -------------------------------------------------
n_i = c(10, 15, 25, 50)
# Identical Cluster Size
m_ij = c(3, 5, 10, 15, 20, 25, 40)
nm_3 = expand.grid(nn, n_i, m_ij)
nm_3$each_s = F
nm_3$both_s = F
nm_3$identical_s = F
nm_3$identical_c = T
nm_3$grp = 3
colnames(nm_3)[1:3] = c("nn", "n_i", "m_ij")
# Large/Small Cluster
m_ij = c(10, 15, 20, 25)
nm_4 = expand.grid(nn, n_i, m_ij, each_s, both_s)
nm_4$identical_s = F
nm_4$identical_c = F
colnames(nm_4)[1:5] = c("nn", "n_i", "m_ij", "each_s", "both_s")
nm_4 = nm_4[-which(which(nm_4$each_s == T) %in% which(nm_4$both_s == F)),]
nm_4$grp = 4
# Bind --------------------------------------------------------------------
samples = rbind(nm_1, nm_2, nm_3, nm_4)
sets = samples[3]
sets = samples[3,]
sets$nn
samples
head(samples)
settings = samples
settings$rho  = rho
settings$wald = 0
settings$anv  = 0
settings$maxt = 0
which(colnames(settings) == c("wald", "anv", "maxt"))
which(colnames(settings) %in% c("wald", "anv", "maxt"))
settings[,9:11]
which(colnames(settings) %in% c("wald", "anv", "maxt"))
AB = list()
names(AB)
AB[[1]] = rnorm(100)
names(AB)
names(AB) = "a"
names(AB)
AB
AB$a
# Preparation -------------------------------------------------------------
if(!("MASS" %in% installed.packages())) install.packages("MASS", dependencies = T)
if(!("mvtnorm" %in% installed.packages())) install.packages("mvtnorm", dependencies = T)
if(!("copula" %in% installed.packages())) install.packages("copula", dependencies = T)
if(!("multcomp" %in% installed.packages())) install.packages("multcomp", dependencies = T)
source("util.R")
source("dat_gen.R")
source("stats.R")
source("settings.R")
source("sim_fun.R")
source("utilcpp_wrap.R")
# Simulation --------------------------------------------------------------
nsim  = 1e4 # Number of Simulation Runs
dists = c("norm", "pois", "beta", "binom")
param_list = list(list(mean = 0, sd = 1), list(lambda = 3), list(shape1 = 2, shape2 = 5), list(size = 1, prob = 0.5))
dist_c = "norm"
dist_params = param_list[[1]]
c_type = "Dunnett"
results = list()
# No Correlation ----------------------------------------------------------
settings = samples
settings$rho  = 0
settings$dist = dist_c
settings$f_2  = 0
settings$wald = 0
settings$anv  = 0
settings$maxt = 0
z = 80
sets = settings[z,]
sizes = nm_gen(nn = sets$nn, n_i = sets$n_i, m_ij = sets$m_ij, each_s = sets$each_s, both_s = sets$both_s, identical_s = sets$identical_s, identical_c = sets$identical_c)
f2 = sum(sizes[[1]]) - length(sizes[[1]])
c_mat = contrMat(sizes[[1]], type = c_type) %*% diag(1, length(sizes[[1]]))
dec = matrix(0, nrow = 3, ncol = nsim)
theta = rep(1/sets$nn, length(sizes[[1]]))
data_n = h_0_f(sizes[[1]], sizes[[2]], dist = dist_c, corstruct = "independent", rho = settings$rho[z], params = dist_params)
setwd("D:/Dropbox/Studium/M.Sc. Statistics/Semester IV/Thesis/Code/MasterThesis")
# Preparation -------------------------------------------------------------
if(!("MASS" %in% installed.packages())) install.packages("MASS", dependencies = T)
if(!("mvtnorm" %in% installed.packages())) install.packages("mvtnorm", dependencies = T)
if(!("copula" %in% installed.packages())) install.packages("copula", dependencies = T)
if(!("multcomp" %in% installed.packages())) install.packages("multcomp", dependencies = T)
source("util.R")
source("dat_gen.R")
source("stats.R")
source("settings.R")
source("sim_fun.R")
source("utilcpp_wrap.R")
# Simulation --------------------------------------------------------------
nsim  = 1e4 # Number of Simulation Runs
dists = c("norm", "pois", "beta", "binom")
param_list = list(list(mean = 0, sd = 1), list(lambda = 3), list(shape1 = 2, shape2 = 5), list(size = 1, prob = 0.5))
dist_c = "norm"
dist_params = param_list[[1]]
c_type = "Dunnett"
results = list()
# No Correlation ----------------------------------------------------------
settings = samples
settings$rho  = 0
settings$dist = dist_c
settings$f_2  = 0
settings$wald = 0
settings$anv  = 0
settings$maxt = 0
z = 80
sets = settings[z,]
sizes = nm_gen(nn = sets$nn, n_i = sets$n_i, m_ij = sets$m_ij, each_s = sets$each_s, both_s = sets$both_s, identical_s = sets$identical_s, identical_c = sets$identical_c)
f2 = sum(sizes[[1]]) - length(sizes[[1]])
c_mat = contrMat(sizes[[1]], type = c_type) %*% diag(1, length(sizes[[1]]))
dec = matrix(0, nrow = 3, ncol = nsim)
theta = rep(1/sets$nn, length(sizes[[1]]))
data_n = h_0_f(sizes[[1]], sizes[[2]], dist = dist_c, corstruct = "independent", rho = settings$rho[z], params = dist_params)
sizes
sourceCpp("util2.cpp")
sourceCpp("util2.cpp")
sigma_est_p(sizes[[1]], data_n, theta = theta, psi = NULL)
sourceCpp("util2.cpp")
len(data_n)
length(data_n)
sizes[[1]]
data_n
sizes[[1]]
sigma_est_p(sizes[[1]], data_n, theta = theta, psi = NULL)
sigma_est_p(sizes[[1]], data_n, theta = theta, psi = NULL)
sourceCpp("util2.cpp")
sigma_est_p = function(n, data, theta = NULL, psi = NULL){
if(is.null(psi)){
psi = list()
for(i in 1:length(data)){
psi[[i]] = rep(1 / length(data[[i]]), length(data[[i]]))
}
}
if(is.null(theta)) theta = rep(1/length(data), length(data))
return(g(n) * sigma_est_cpp3(n, data, theta, psi))
}
sigma_est_p(sizes[[1]], data_n, theta = theta, psi = NULL)
sigma_est_p = function(n, data, theta = NULL, psi = NULL){
if(is.null(psi)){
psi = list()
for(i in 1:length(data)){
psi[[i]] = rep(1 / length(data[[i]]), length(data[[i]]))
}
}
if(is.null(theta)) theta = rep(1/length(data), length(data))
return(g(n) * sigma_est_cpp2(n, data, theta, psi))
}
sigma_est_p(sizes[[1]], data_n, theta = theta, psi = NULL)
sourceCpp("util2.cpp")
sourceCpp("util2.cpp")
sigma_est_p(sizes[[1]], data_n, theta = theta, psi = NULL)
sigma_est_cpp2(sizes[[1]], data_n, theta, psi)
sourceCpp("util2.cpp")
sigma_est_cpp2(sizes[[1]], data_n, theta, psi)
sourceCpp("util2.cpp")
sourceCpp("util2.cpp")
sigma_est_cpp2(sizes[[1]], data_n, theta, psi)
sourceCpp("util2.cpp")
sourceCpp("util2.cpp")
sigma_est_cpp2(sizes[[1]], data_n, theta, psi)
