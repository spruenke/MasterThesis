geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = typ), size = 1) +
#geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = "dashed"))+
scale_colour_discrete(name = "Sample Size") +
scale_linetype_discrete(name = "Procedure") +
labs(title ="Type-I Error for 2 samples", x = "Clustersize", y = "Type-I error")
p2 = ggplot(data = subset(dat_11, nn == 3))  +
geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = typ), size = 1) +
#geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = "dashed"))+
scale_colour_discrete(name = "Sample Size") +
scale_linetype_discrete(name = "Procedure") +
labs(title ="Type-I Error for 3 samples", x = "Clustersize", y = "Type-I error")
p3 = ggplot(data = subset(dat_11, nn == 4))  +
geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = typ), size = 1) +
#geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = "dashed"))+
scale_colour_discrete(name = "Sample Size") +
scale_linetype_discrete(name = "Procedure") +
labs(title ="Type-I Error for 4 samples", x = "Clustersize", y = "Type-I error")
p4 = ggplot(data = subset(dat_11, nn == 5))  +
geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = typ), size = 1) +
#geom_line(aes(x = m_ij, y = val, colour = as.factor(n_i), linetype = "dashed"))+
scale_colour_discrete(name = "Sample Size") +
scale_linetype_discrete(name = "Procedure") +
labs(title ="Type-I Error for 5 samples", x = "Clustersize", y = "Type-I error")
p_dat_11 = ggarrange(p1, p2, p3, p4, ncol=2, nrow=2, common.legend = TRUE, legend="right")
A[[j]] = p_dat_11
rm(p1, p2, p3, p4)
}
res = c(res, A)
}
names(res) = names_list
for(k in 1:length(res)){
pdf(file = paste0("figures/unweighted_", names_list[k], ".pdf"), width = 16, height = 9)
print(res[[k]])
dev.off()
}
library(rankCluster)
nn = 3
n_i = 15
m_ij = 1
each_s = T
both_s = T
identical_s = F
identical_c = T
sizes = rankCluster::nm_gen2(nn = sets$nn, n_i = sets$n_i, m_ij = sets$m_ij, each_s = sets$each_s, both_s = sets$both_s, identical_s = sets$identical_s, identical_c = sets$identical_c)
library(devtools)
install_github("spruenke/rankCluster")
library(devtools)
install_github("spruenke/rankCluster")
library(rankCluster)
nn = 3
n_i = 15
m_ij = 1
each_s = T
both_s = T
identical_s = F
identical_c = T
sizes = rankCluster::nm_gen2(nn = sets$nn, n_i = sets$n_i, m_ij = sets$m_ij, each_s = sets$each_s, both_s = sets$both_s, identical_s = sets$identical_s, identical_c = sets$identical_c)
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
sizes
c_mat = contrMat(sizes[[1]], type = c_type) %*% diag(1, length(sizes[[1]]))
library(multcompt)
library(multcomp)
c_mat = contrMat(sizes[[1]], type = c_type) %*% diag(1, length(sizes[[1]]))
c_mat = contrMat(sizes[[1]], type = "Dunnett") %*% diag(1, length(sizes[[1]]))
c_mat
c_mat = contrMat(sizes[[1]], type = "Tukey") %*% diag(1, length(sizes[[1]]))
c_mat
library(rankFD)
install.packages("rankFD")
library(rankFD)
rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
c(dat)
unlist(dat)
sizes
lapply(sizes[[2]], length)
n = sizes[[1]]
n
for(i in 1:nn){
m[[i]] = rep(1, n[i])
}
m = c()
for(i in 1:nn){
m[[i]] = rep(1, n[i])
}
m
library(devtools)
install_github("spruenke/rankCluster")
library(rankCluster)
library(multcomp)
nn = 3
n_i = 15
m_ij = 1
each_s = T
both_s = T
identical_s = F
identical_c = T
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
sizes
c_mat = contrMat(sizes[[1]], type = "Tukey") %*% diag(1, length(sizes[[1]]))
library(rankFD)
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
grp = rep(c(a, b, d), each = lapply(sizes[[2]], length))
grp = rep(c("a", "b", "d"), each = lapply(sizes[[2]], length))
grp
?rep
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
grp
16 + 15 + 14
dat
dat_fd = cbind(unlist(dat), grp)
dat_fd = data.frame(val = unlist(dat), grp = grp)
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = "Tukey")
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list("Tukey"))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list("tukey"))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list("Tukey"))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = c_mat)
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list(c_mat))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list(a = c_mat))
list(a = c_mat)
list(c_mat)
rownames(c_mat) = NULL
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list(c_mat))
list(c_mat)
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list("Tukey"))
list("Tukey")
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = c("Tukey"))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list("Tukey"))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list("Tukey", "Dunnett"))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", contrast = list("Dunnett"))
rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
rankCluster::rel_eff(dat)
rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted")
rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f2 = sum(sizes[[1]]) - length(sizes[[1]]))
rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
sizes
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
rfd$Wald.Type.Statistic
rfd$ANOVA.Type.Statistic
rfd$output
rfd$Descriptive
p_hat
rfd$Descriptive$Rel.Effect - p_hat
rfd$Wald.Type.Statistic
rfd$Wald.Type.Statistic$Statistic
rfd$Wald.Type.Statistic[1]
rfd$ANOVA.Type.Statistic
rfd$Wald.Type.Statistic[1] - qw$Statistic
qw
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
rfd$Wald.Type.Statistic[1] - qw$Statistic
rfd$ANOVA.Type.Statistic[1]
sum(abs(rfd$Descriptive$Rel.Effect - p_hat))
rfd$ANOVA.Type.Statistic[1] - qa$Statistic
rfd$ANOVA.Type.Statistic
qa$df
rfd$ANOVA.Type.Statistic[c(2,3)] - qa$df
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
rfd$Wald.Type.Statistic[1] - qw$Statistic
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
sizes
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
A = B = rnorm(20)
A
B
A = matrix(rnorm(20), 4, 5)
B = matrix(rnorm(20), 4, 5)
A
B
mean(A, B)
sum(A, B) / 2
(A + B) / 2
power.t.test(delta = 0.12, sd = 0.1, power = 0.8)
power.t.test(delta = 0.012, sd = 0.1, power = 0.8)
power.t.test(delta = 5, sd = 10, power = 0.8)
ablist = list(A, B)
(A + B) / 2
lapply(ablist, "+") / 2
lapply(ablist, +)
lapply(ablist, ´+´)
Reduce("+", ablist)
Reduce("+", ablist) / 2
D = matrix(rnorm(20), 4, 5)
abdlist = list(A, B, D)
(A + B + D) / 3
Reduce("+", abdlist) / 3
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
n_sim = 1e4
p_hat = matrix(0, nrow = 3, ncol = n_sim)
var_hat = list()
for(i in 1:n_sim){
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
p_hat[,i] = rankCluster::rel_eff(dat)
var_hat[[i]] = rankCluster::sigma_est(sizes[[1]], dat)
}
mean_var = Reduce("+", var_hat) / n_sim
cov(p_hat)
mean_var
cov(t(p_hat))
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
n_sim = 1e4
p_hat = matrix(0, nrow = 3, ncol = n_sim)
var_hat = list()
for(i in 1:n_sim){
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
p_hat[,i] = rankCluster::rel_eff(dat)
var_hat[[i]] = rankCluster::sigma_est(sizes[[1]], dat)
}
mean_var = Reduce("+", var_hat) / n_sim
cov(t(p_hat))
mean_var
cov(t(p_hat)) * sqrt(g(sizes[[1]]))
cov(t(p_hat)) *(g(sizes[[1]]))
abs(mean_var - emp_var)
# Eigenschaften für Datenerstellung <-> Unwichtig zum Lesen ---------------
nn = 3
n_i = 15
m_ij = 1
each_s = T
both_s = T
identical_s = F
identical_c = T
# Kontrastmatrix
c_mat = contrMat(sizes[[1]], type = "Tukey") %*% diag(1, length(sizes[[1]]))
rownames(c_mat) = NULL
# Daten wie in "Severely Imbalanced" --------------------------------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_sev = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_sev)
# Daten wie in "Mildly Imbalanced" ----------------------------------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_mild = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_mild)
# Simulation d. Kovarianzmatrix für "Severely Imbalanced" -----------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
n_sim = 1e4
p_hat = matrix(0, nrow = 3, ncol = n_sim)
var_hat = list()
for(i in 1:n_sim){
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
p_hat[,i] = rankCluster::rel_eff(dat)
var_hat[[i]] = rankCluster::sigma_est(sizes[[1]], dat)
}
mean_var = Reduce("+", var_hat) / n_sim
emp_var  = sqrt(rankCluster::g(sizes[[1]])) * cov(t(p_hat))
diff_var_sev = abs(mean_var - emp_var)
# Simulation d. Kovarianzmatrix für "Mildly Imbalanced" -----------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
n_sim = 1e4
p_hat = matrix(0, nrow = 3, ncol = n_sim)
var_hat = list()
for(i in 1:n_sim){
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
p_hat[,i] = rankCluster::rel_eff(dat)
var_hat[[i]] = rankCluster::sigma_est(sizes[[1]], dat)
}
mean_var = Reduce("+", var_hat) / n_sim
emp_var = sqrt(rankCluster::g(sizes[[1]])) * cov(t(p_hat))
diff_var_mild = abs(mean_var - emp_var)
diff_var_mild
diff_var_sev
# Eigenschaften für Datenerstellung <-> Unwichtig zum Lesen ---------------
nn = 3
n_i = 15
m_ij = 1
each_s = T
both_s = T
identical_s = F
identical_c = T
# Kontrastmatrix
c_mat = contrMat(sizes[[1]], type = "Tukey") %*% diag(1, length(sizes[[1]]))
rownames(c_mat) = NULL
# Daten wie in "Severely Imbalanced" --------------------------------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_sev = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_sev)
# Daten wie in "Mildly Imbalanced" ----------------------------------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_mild = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_mild)
# Simulation d. Kovarianzmatrix für "Severely Imbalanced" -----------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
n_sim = 1e4
p_hat = matrix(0, nrow = 3, ncol = n_sim)
var_hat = list()
for(i in 1:n_sim){
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
p_hat[,i] = sqrt(rankCluster::g(sizes[[1]])) * rankCluster::rel_eff(dat)
var_hat[[i]] = rankCluster::sigma_est(sizes[[1]], dat)
}
mean_var = Reduce("+", var_hat) / n_sim
emp_var  =  cov(t(p_hat))
diff_var_sev = abs(mean_var - emp_var)
# Simulation d. Kovarianzmatrix für "Mildly Imbalanced" -----------------
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
n_sim = 1e4
p_hat = matrix(0, nrow = 3, ncol = n_sim)
var_hat = list()
for(i in 1:n_sim){
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
p_hat[,i] = sqrt(rankCluster::g(sizes[[1]])) * rankCluster::rel_eff(dat)
var_hat[[i]] = rankCluster::sigma_est(sizes[[1]], dat)
}
mean_var = Reduce("+", var_hat) / n_sim
emp_var =  cov(t(p_hat))
diff_var_mild = abs(mean_var - emp_var)
diff_var_mild
diff_var_sev
diff_mild
print(diff_mild)
# Stark Unbalanciert:
print(diff_sev)
# Differenzen Varianz-Matrix (Berechnung vs. Empirisch)
# Mild Unbalanciert:
print(diff_var_mild)
# Stark Unbalanciert:
print(diff_var_sev)
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
p_hat = rankCluster::rel_eff(dat)
rfd
p_hat = rankCluster::rel_eff(dat)
p_hat
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", rounds = 10)
p_hat = rankCluster::rel_eff(dat)
p_hat
sum(abs(rfd$Descriptive$Rel.Effect - p_hat))
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p")
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", rounds = 10)
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_mild = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_mild)
rfd
q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
install.packages("mctp")
# Kontrastmatrix
c_mat = contrMat(sizes[[1]], type = "GrandMean") %*% diag(1, length(sizes[[1]]))
c_mat
rownames
# Erstellen der Sample- und Clustersizes
sizes = rankCluster::nm_gen(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", rounds = 10)
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_sev = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_sev)
sizes = rankCluster::nm_gen2(nn, n_i, m_ij, each_s, both_s, identical_s, identical_c)
# Generieren von Daten
dat = rankCluster::h_0_f(sizes[[1]], sizes[[2]], dist = "norm", corstruct = "independent", rho = 0, params = list(mean = 0, sd = 1))
# Datensatz in ein Format, das rankFD lesen kann
grp = rep(c("a", "b", "d"), times = lapply(sizes[[2]], length))
dat_fd = data.frame(val = unlist(dat), grp = grp)
# Teststatistiken und Freiheitsgrade
rfd = rankFD::rankFD(val ~ grp, dat_fd, effect = "unweighted", hypothesis = "H0p", rounds = 10)
p_hat = rankCluster::rel_eff(dat)
qw = rankCluster::q_wald(sizes[[1]], dat, c_mat, type = "unweighted")
qa = rankCluster::q_anova(sizes[[1]], dat, c_mat, type = "unweighted", f_2 = (sum(sizes[[1]]) - length(sizes[[1]])))
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_mild = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_mild)
qa
rfd
# Abs. Differenzen zwischen rankFD und Masterarbeit (rankCluster)
diff_sev = data.frame("Wald" = abs(rfd$Wald.Type.Statistic[1] - qw$Statistic),
"ANOVA" = abs(rfd$ANOVA.Type.Statistic[1] - qa$Statistic),
"ANOVA df_1" = abs(rfd$ANOVA.Type.Statistic[2] - qa$df[1]),
"Rel.Eff" =  sum(abs(rfd$Descriptive$Rel.Effect - p_hat)))
print(diff_sev)
sessionInfo
sessionInfo()
